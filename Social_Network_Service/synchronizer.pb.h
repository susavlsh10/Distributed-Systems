// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: synchronizer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_synchronizer_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_synchronizer_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_synchronizer_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_synchronizer_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_synchronizer_2eproto;
namespace csce438 {
class MasterInfo;
struct MasterInfoDefaultTypeInternal;
extern MasterInfoDefaultTypeInternal _MasterInfo_default_instance_;
class SyncReply;
struct SyncReplyDefaultTypeInternal;
extern SyncReplyDefaultTypeInternal _SyncReply_default_instance_;
class SyncRequest;
struct SyncRequestDefaultTypeInternal;
extern SyncRequestDefaultTypeInternal _SyncRequest_default_instance_;
class timelineRequest;
struct timelineRequestDefaultTypeInternal;
extern timelineRequestDefaultTypeInternal _timelineRequest_default_instance_;
}  // namespace csce438
PROTOBUF_NAMESPACE_OPEN
template <>
::csce438::MasterInfo* Arena::CreateMaybeMessage<::csce438::MasterInfo>(Arena*);
template <>
::csce438::SyncReply* Arena::CreateMaybeMessage<::csce438::SyncReply>(Arena*);
template <>
::csce438::SyncRequest* Arena::CreateMaybeMessage<::csce438::SyncRequest>(Arena*);
template <>
::csce438::timelineRequest* Arena::CreateMaybeMessage<::csce438::timelineRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace csce438 {

// ===================================================================


// -------------------------------------------------------------------

class SyncRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:csce438.SyncRequest) */ {
 public:
  inline SyncRequest() : SyncRequest(nullptr) {}
  ~SyncRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SyncRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncRequest(const SyncRequest& from);
  SyncRequest(SyncRequest&& from) noexcept
    : SyncRequest() {
    *this = ::std::move(from);
  }

  inline SyncRequest& operator=(const SyncRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncRequest& operator=(SyncRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncRequest* internal_default_instance() {
    return reinterpret_cast<const SyncRequest*>(
               &_SyncRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SyncRequest& a, SyncRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncRequest& from) {
    SyncRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "csce438.SyncRequest";
  }
  protected:
  explicit SyncRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 2,
    kMessageFieldNumber = 1,
    kTypeFieldNumber = 3,
    kUsernameFieldNumber = 5,
    kFollownameFieldNumber = 6,
    kClusterIDFieldNumber = 4,
  };
  // repeated string users = 2;
  int users_size() const;
  private:
  int _internal_users_size() const;

  public:
  void clear_users() ;
  const std::string& users(int index) const;
  std::string* mutable_users(int index);
  void set_users(int index, const std::string& value);
  void set_users(int index, std::string&& value);
  void set_users(int index, const char* value);
  void set_users(int index, const char* value, std::size_t size);
  void set_users(int index, absl::string_view value);
  std::string* add_users();
  void add_users(const std::string& value);
  void add_users(std::string&& value);
  void add_users(const char* value);
  void add_users(const char* value, std::size_t size);
  void add_users(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& users() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_users();

  private:
  const std::string& _internal_users(int index) const;
  std::string* _internal_add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_users() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_users();

  public:
  // string message = 1;
  void clear_message() ;
  const std::string& message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // string type = 3;
  void clear_type() ;
  const std::string& type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* ptr);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // string username = 5;
  void clear_username() ;
  const std::string& username() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* ptr);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string followname = 6;
  void clear_followname() ;
  const std::string& followname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_followname(Arg_&& arg, Args_... args);
  std::string* mutable_followname();
  PROTOBUF_NODISCARD std::string* release_followname();
  void set_allocated_followname(std::string* ptr);

  private:
  const std::string& _internal_followname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_followname(
      const std::string& value);
  std::string* _internal_mutable_followname();

  public:
  // int32 ClusterID = 4;
  void clear_clusterid() ;
  ::int32_t clusterid() const;
  void set_clusterid(::int32_t value);

  private:
  ::int32_t _internal_clusterid() const;
  void _internal_set_clusterid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:csce438.SyncRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> users_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr followname_;
    ::int32_t clusterid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_synchronizer_2eproto;
};// -------------------------------------------------------------------

class SyncReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:csce438.SyncReply) */ {
 public:
  inline SyncReply() : SyncReply(nullptr) {}
  ~SyncReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SyncReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncReply(const SyncReply& from);
  SyncReply(SyncReply&& from) noexcept
    : SyncReply() {
    *this = ::std::move(from);
  }

  inline SyncReply& operator=(const SyncReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncReply& operator=(SyncReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncReply* internal_default_instance() {
    return reinterpret_cast<const SyncReply*>(
               &_SyncReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SyncReply& a, SyncReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SyncReply& from) {
    SyncReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "csce438.SyncReply";
  }
  protected:
  explicit SyncReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:csce438.SyncReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_synchronizer_2eproto;
};// -------------------------------------------------------------------

class timelineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:csce438.timelineRequest) */ {
 public:
  inline timelineRequest() : timelineRequest(nullptr) {}
  ~timelineRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR timelineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  timelineRequest(const timelineRequest& from);
  timelineRequest(timelineRequest&& from) noexcept
    : timelineRequest() {
    *this = ::std::move(from);
  }

  inline timelineRequest& operator=(const timelineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline timelineRequest& operator=(timelineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const timelineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const timelineRequest* internal_default_instance() {
    return reinterpret_cast<const timelineRequest*>(
               &_timelineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(timelineRequest& a, timelineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(timelineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(timelineRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  timelineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<timelineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const timelineRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const timelineRequest& from) {
    timelineRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(timelineRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "csce438.timelineRequest";
  }
  protected:
  explicit timelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kUsernameFieldNumber = 1,
    kFollowerNameFieldNumber = 4,
  };
  // repeated string message = 2;
  int message_size() const;
  private:
  int _internal_message_size() const;

  public:
  void clear_message() ;
  const std::string& message(int index) const;
  std::string* mutable_message(int index);
  void set_message(int index, const std::string& value);
  void set_message(int index, std::string&& value);
  void set_message(int index, const char* value);
  void set_message(int index, const char* value, std::size_t size);
  void set_message(int index, absl::string_view value);
  std::string* add_message();
  void add_message(const std::string& value);
  void add_message(std::string&& value);
  void add_message(const char* value);
  void add_message(const char* value, std::size_t size);
  void add_message(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& message() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_message();

  private:
  const std::string& _internal_message(int index) const;
  std::string* _internal_add_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_message() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_message();

  public:
  // repeated string timestamp = 3;
  int timestamp_size() const;
  private:
  int _internal_timestamp_size() const;

  public:
  void clear_timestamp() ;
  const std::string& timestamp(int index) const;
  std::string* mutable_timestamp(int index);
  void set_timestamp(int index, const std::string& value);
  void set_timestamp(int index, std::string&& value);
  void set_timestamp(int index, const char* value);
  void set_timestamp(int index, const char* value, std::size_t size);
  void set_timestamp(int index, absl::string_view value);
  std::string* add_timestamp();
  void add_timestamp(const std::string& value);
  void add_timestamp(std::string&& value);
  void add_timestamp(const char* value);
  void add_timestamp(const char* value, std::size_t size);
  void add_timestamp(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_timestamp();

  private:
  const std::string& _internal_timestamp(int index) const;
  std::string* _internal_add_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_timestamp();

  public:
  // string username = 1;
  void clear_username() ;
  const std::string& username() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* ptr);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string follower_name = 4;
  void clear_follower_name() ;
  const std::string& follower_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_follower_name(Arg_&& arg, Args_... args);
  std::string* mutable_follower_name();
  PROTOBUF_NODISCARD std::string* release_follower_name();
  void set_allocated_follower_name(std::string* ptr);

  private:
  const std::string& _internal_follower_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_follower_name(
      const std::string& value);
  std::string* _internal_mutable_follower_name();

  public:
  // @@protoc_insertion_point(class_scope:csce438.timelineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> message_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> timestamp_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr follower_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_synchronizer_2eproto;
};// -------------------------------------------------------------------

class MasterInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:csce438.MasterInfo) */ {
 public:
  inline MasterInfo() : MasterInfo(nullptr) {}
  ~MasterInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MasterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MasterInfo(const MasterInfo& from);
  MasterInfo(MasterInfo&& from) noexcept
    : MasterInfo() {
    *this = ::std::move(from);
  }

  inline MasterInfo& operator=(const MasterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MasterInfo& operator=(MasterInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MasterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MasterInfo* internal_default_instance() {
    return reinterpret_cast<const MasterInfo*>(
               &_MasterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MasterInfo& a, MasterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MasterInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MasterInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MasterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MasterInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MasterInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MasterInfo& from) {
    MasterInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MasterInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "csce438.MasterInfo";
  }
  protected:
  explicit MasterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIDFieldNumber = 1,
    kClusterIDFieldNumber = 2,
  };
  // int32 serverID = 1;
  void clear_serverid() ;
  ::int32_t serverid() const;
  void set_serverid(::int32_t value);

  private:
  ::int32_t _internal_serverid() const;
  void _internal_set_serverid(::int32_t value);

  public:
  // int32 clusterID = 2;
  void clear_clusterid() ;
  ::int32_t clusterid() const;
  void set_clusterid(::int32_t value);

  private:
  ::int32_t _internal_clusterid() const;
  void _internal_set_clusterid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:csce438.MasterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int32_t serverid_;
    ::int32_t clusterid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_synchronizer_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SyncRequest

// string message = 1;
inline void SyncRequest::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& SyncRequest::message() const {
  // @@protoc_insertion_point(field_get:csce438.SyncRequest.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SyncRequest::set_message(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:csce438.SyncRequest.message)
}
inline std::string* SyncRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:csce438.SyncRequest.message)
  return _s;
}
inline const std::string& SyncRequest::_internal_message() const {
  return _impl_.message_.Get();
}
inline void SyncRequest::_internal_set_message(const std::string& value) {
  ;


  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncRequest::_internal_mutable_message() {
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* SyncRequest::release_message() {
  // @@protoc_insertion_point(field_release:csce438.SyncRequest.message)
  return _impl_.message_.Release();
}
inline void SyncRequest::set_allocated_message(std::string* value) {
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:csce438.SyncRequest.message)
}

// repeated string users = 2;
inline int SyncRequest::_internal_users_size() const {
  return _impl_.users_.size();
}
inline int SyncRequest::users_size() const {
  return _internal_users_size();
}
inline void SyncRequest::clear_users() {
  _internal_mutable_users()->Clear();
}
inline std::string* SyncRequest::add_users() {
  std::string* _s = _internal_add_users();
  // @@protoc_insertion_point(field_add_mutable:csce438.SyncRequest.users)
  return _s;
}
inline const std::string& SyncRequest::users(int index) const {
  // @@protoc_insertion_point(field_get:csce438.SyncRequest.users)
  return _internal_users(index);
}
inline std::string* SyncRequest::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:csce438.SyncRequest.users)
  return _internal_mutable_users()->Mutable(index);
}
inline void SyncRequest::set_users(int index, const std::string& value) {
  _internal_mutable_users()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:csce438.SyncRequest.users)
}
inline void SyncRequest::set_users(int index, std::string&& value) {
  _internal_mutable_users()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:csce438.SyncRequest.users)
}
inline void SyncRequest::set_users(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_users()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:csce438.SyncRequest.users)
}
inline void SyncRequest::set_users(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_users()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csce438.SyncRequest.users)
}
inline void SyncRequest::set_users(int index, absl::string_view value) {
  _internal_mutable_users()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:csce438.SyncRequest.users)
}
inline void SyncRequest::add_users(const std::string& value) {
  _internal_mutable_users()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:csce438.SyncRequest.users)
}
inline void SyncRequest::add_users(std::string&& value) {
  _internal_mutable_users()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:csce438.SyncRequest.users)
}
inline void SyncRequest::add_users(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_users()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:csce438.SyncRequest.users)
}
inline void SyncRequest::add_users(const char* value, std::size_t size) {
  _internal_mutable_users()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:csce438.SyncRequest.users)
}
inline void SyncRequest::add_users(absl::string_view value) {
  _internal_mutable_users()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:csce438.SyncRequest.users)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SyncRequest::users() const {
  // @@protoc_insertion_point(field_list:csce438.SyncRequest.users)
  return _internal_users();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* SyncRequest::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:csce438.SyncRequest.users)
  return _internal_mutable_users();
}
inline const std::string& SyncRequest::_internal_users(int index) const {
  return _internal_users().Get(index);
}
inline std::string* SyncRequest::_internal_add_users() {
  return _internal_mutable_users()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SyncRequest::_internal_users() const {
  return _impl_.users_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SyncRequest::_internal_mutable_users() {
  return &_impl_.users_;
}

// string type = 3;
inline void SyncRequest::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& SyncRequest::type() const {
  // @@protoc_insertion_point(field_get:csce438.SyncRequest.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SyncRequest::set_type(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:csce438.SyncRequest.type)
}
inline std::string* SyncRequest::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:csce438.SyncRequest.type)
  return _s;
}
inline const std::string& SyncRequest::_internal_type() const {
  return _impl_.type_.Get();
}
inline void SyncRequest::_internal_set_type(const std::string& value) {
  ;


  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncRequest::_internal_mutable_type() {
  ;
  return _impl_.type_.Mutable( GetArenaForAllocation());
}
inline std::string* SyncRequest::release_type() {
  // @@protoc_insertion_point(field_release:csce438.SyncRequest.type)
  return _impl_.type_.Release();
}
inline void SyncRequest::set_allocated_type(std::string* value) {
  _impl_.type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:csce438.SyncRequest.type)
}

// int32 ClusterID = 4;
inline void SyncRequest::clear_clusterid() {
  _impl_.clusterid_ = 0;
}
inline ::int32_t SyncRequest::clusterid() const {
  // @@protoc_insertion_point(field_get:csce438.SyncRequest.ClusterID)
  return _internal_clusterid();
}
inline void SyncRequest::set_clusterid(::int32_t value) {
  _internal_set_clusterid(value);
  // @@protoc_insertion_point(field_set:csce438.SyncRequest.ClusterID)
}
inline ::int32_t SyncRequest::_internal_clusterid() const {
  return _impl_.clusterid_;
}
inline void SyncRequest::_internal_set_clusterid(::int32_t value) {
  ;
  _impl_.clusterid_ = value;
}

// string username = 5;
inline void SyncRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& SyncRequest::username() const {
  // @@protoc_insertion_point(field_get:csce438.SyncRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SyncRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:csce438.SyncRequest.username)
}
inline std::string* SyncRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:csce438.SyncRequest.username)
  return _s;
}
inline const std::string& SyncRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void SyncRequest::_internal_set_username(const std::string& value) {
  ;


  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncRequest::_internal_mutable_username() {
  ;
  return _impl_.username_.Mutable( GetArenaForAllocation());
}
inline std::string* SyncRequest::release_username() {
  // @@protoc_insertion_point(field_release:csce438.SyncRequest.username)
  return _impl_.username_.Release();
}
inline void SyncRequest::set_allocated_username(std::string* value) {
  _impl_.username_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:csce438.SyncRequest.username)
}

// string followname = 6;
inline void SyncRequest::clear_followname() {
  _impl_.followname_.ClearToEmpty();
}
inline const std::string& SyncRequest::followname() const {
  // @@protoc_insertion_point(field_get:csce438.SyncRequest.followname)
  return _internal_followname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SyncRequest::set_followname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.followname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:csce438.SyncRequest.followname)
}
inline std::string* SyncRequest::mutable_followname() {
  std::string* _s = _internal_mutable_followname();
  // @@protoc_insertion_point(field_mutable:csce438.SyncRequest.followname)
  return _s;
}
inline const std::string& SyncRequest::_internal_followname() const {
  return _impl_.followname_.Get();
}
inline void SyncRequest::_internal_set_followname(const std::string& value) {
  ;


  _impl_.followname_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncRequest::_internal_mutable_followname() {
  ;
  return _impl_.followname_.Mutable( GetArenaForAllocation());
}
inline std::string* SyncRequest::release_followname() {
  // @@protoc_insertion_point(field_release:csce438.SyncRequest.followname)
  return _impl_.followname_.Release();
}
inline void SyncRequest::set_allocated_followname(std::string* value) {
  _impl_.followname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.followname_.IsDefault()) {
          _impl_.followname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:csce438.SyncRequest.followname)
}

// -------------------------------------------------------------------

// SyncReply

// bool success = 1;
inline void SyncReply::clear_success() {
  _impl_.success_ = false;
}
inline bool SyncReply::success() const {
  // @@protoc_insertion_point(field_get:csce438.SyncReply.success)
  return _internal_success();
}
inline void SyncReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:csce438.SyncReply.success)
}
inline bool SyncReply::_internal_success() const {
  return _impl_.success_;
}
inline void SyncReply::_internal_set_success(bool value) {
  ;
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// timelineRequest

// string username = 1;
inline void timelineRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& timelineRequest::username() const {
  // @@protoc_insertion_point(field_get:csce438.timelineRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void timelineRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:csce438.timelineRequest.username)
}
inline std::string* timelineRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:csce438.timelineRequest.username)
  return _s;
}
inline const std::string& timelineRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void timelineRequest::_internal_set_username(const std::string& value) {
  ;


  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* timelineRequest::_internal_mutable_username() {
  ;
  return _impl_.username_.Mutable( GetArenaForAllocation());
}
inline std::string* timelineRequest::release_username() {
  // @@protoc_insertion_point(field_release:csce438.timelineRequest.username)
  return _impl_.username_.Release();
}
inline void timelineRequest::set_allocated_username(std::string* value) {
  _impl_.username_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:csce438.timelineRequest.username)
}

// repeated string message = 2;
inline int timelineRequest::_internal_message_size() const {
  return _impl_.message_.size();
}
inline int timelineRequest::message_size() const {
  return _internal_message_size();
}
inline void timelineRequest::clear_message() {
  _internal_mutable_message()->Clear();
}
inline std::string* timelineRequest::add_message() {
  std::string* _s = _internal_add_message();
  // @@protoc_insertion_point(field_add_mutable:csce438.timelineRequest.message)
  return _s;
}
inline const std::string& timelineRequest::message(int index) const {
  // @@protoc_insertion_point(field_get:csce438.timelineRequest.message)
  return _internal_message(index);
}
inline std::string* timelineRequest::mutable_message(int index) {
  // @@protoc_insertion_point(field_mutable:csce438.timelineRequest.message)
  return _internal_mutable_message()->Mutable(index);
}
inline void timelineRequest::set_message(int index, const std::string& value) {
  _internal_mutable_message()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:csce438.timelineRequest.message)
}
inline void timelineRequest::set_message(int index, std::string&& value) {
  _internal_mutable_message()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:csce438.timelineRequest.message)
}
inline void timelineRequest::set_message(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_message()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:csce438.timelineRequest.message)
}
inline void timelineRequest::set_message(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_message()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csce438.timelineRequest.message)
}
inline void timelineRequest::set_message(int index, absl::string_view value) {
  _internal_mutable_message()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:csce438.timelineRequest.message)
}
inline void timelineRequest::add_message(const std::string& value) {
  _internal_mutable_message()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:csce438.timelineRequest.message)
}
inline void timelineRequest::add_message(std::string&& value) {
  _internal_mutable_message()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:csce438.timelineRequest.message)
}
inline void timelineRequest::add_message(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_message()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:csce438.timelineRequest.message)
}
inline void timelineRequest::add_message(const char* value, std::size_t size) {
  _internal_mutable_message()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:csce438.timelineRequest.message)
}
inline void timelineRequest::add_message(absl::string_view value) {
  _internal_mutable_message()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:csce438.timelineRequest.message)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
timelineRequest::message() const {
  // @@protoc_insertion_point(field_list:csce438.timelineRequest.message)
  return _internal_message();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* timelineRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable_list:csce438.timelineRequest.message)
  return _internal_mutable_message();
}
inline const std::string& timelineRequest::_internal_message(int index) const {
  return _internal_message().Get(index);
}
inline std::string* timelineRequest::_internal_add_message() {
  return _internal_mutable_message()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
timelineRequest::_internal_message() const {
  return _impl_.message_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
timelineRequest::_internal_mutable_message() {
  return &_impl_.message_;
}

// repeated string timestamp = 3;
inline int timelineRequest::_internal_timestamp_size() const {
  return _impl_.timestamp_.size();
}
inline int timelineRequest::timestamp_size() const {
  return _internal_timestamp_size();
}
inline void timelineRequest::clear_timestamp() {
  _internal_mutable_timestamp()->Clear();
}
inline std::string* timelineRequest::add_timestamp() {
  std::string* _s = _internal_add_timestamp();
  // @@protoc_insertion_point(field_add_mutable:csce438.timelineRequest.timestamp)
  return _s;
}
inline const std::string& timelineRequest::timestamp(int index) const {
  // @@protoc_insertion_point(field_get:csce438.timelineRequest.timestamp)
  return _internal_timestamp(index);
}
inline std::string* timelineRequest::mutable_timestamp(int index) {
  // @@protoc_insertion_point(field_mutable:csce438.timelineRequest.timestamp)
  return _internal_mutable_timestamp()->Mutable(index);
}
inline void timelineRequest::set_timestamp(int index, const std::string& value) {
  _internal_mutable_timestamp()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:csce438.timelineRequest.timestamp)
}
inline void timelineRequest::set_timestamp(int index, std::string&& value) {
  _internal_mutable_timestamp()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:csce438.timelineRequest.timestamp)
}
inline void timelineRequest::set_timestamp(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_timestamp()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:csce438.timelineRequest.timestamp)
}
inline void timelineRequest::set_timestamp(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_timestamp()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:csce438.timelineRequest.timestamp)
}
inline void timelineRequest::set_timestamp(int index, absl::string_view value) {
  _internal_mutable_timestamp()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:csce438.timelineRequest.timestamp)
}
inline void timelineRequest::add_timestamp(const std::string& value) {
  _internal_mutable_timestamp()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:csce438.timelineRequest.timestamp)
}
inline void timelineRequest::add_timestamp(std::string&& value) {
  _internal_mutable_timestamp()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:csce438.timelineRequest.timestamp)
}
inline void timelineRequest::add_timestamp(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_timestamp()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:csce438.timelineRequest.timestamp)
}
inline void timelineRequest::add_timestamp(const char* value, std::size_t size) {
  _internal_mutable_timestamp()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:csce438.timelineRequest.timestamp)
}
inline void timelineRequest::add_timestamp(absl::string_view value) {
  _internal_mutable_timestamp()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:csce438.timelineRequest.timestamp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
timelineRequest::timestamp() const {
  // @@protoc_insertion_point(field_list:csce438.timelineRequest.timestamp)
  return _internal_timestamp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* timelineRequest::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:csce438.timelineRequest.timestamp)
  return _internal_mutable_timestamp();
}
inline const std::string& timelineRequest::_internal_timestamp(int index) const {
  return _internal_timestamp().Get(index);
}
inline std::string* timelineRequest::_internal_add_timestamp() {
  return _internal_mutable_timestamp()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
timelineRequest::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
timelineRequest::_internal_mutable_timestamp() {
  return &_impl_.timestamp_;
}

// string follower_name = 4;
inline void timelineRequest::clear_follower_name() {
  _impl_.follower_name_.ClearToEmpty();
}
inline const std::string& timelineRequest::follower_name() const {
  // @@protoc_insertion_point(field_get:csce438.timelineRequest.follower_name)
  return _internal_follower_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void timelineRequest::set_follower_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.follower_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:csce438.timelineRequest.follower_name)
}
inline std::string* timelineRequest::mutable_follower_name() {
  std::string* _s = _internal_mutable_follower_name();
  // @@protoc_insertion_point(field_mutable:csce438.timelineRequest.follower_name)
  return _s;
}
inline const std::string& timelineRequest::_internal_follower_name() const {
  return _impl_.follower_name_.Get();
}
inline void timelineRequest::_internal_set_follower_name(const std::string& value) {
  ;


  _impl_.follower_name_.Set(value, GetArenaForAllocation());
}
inline std::string* timelineRequest::_internal_mutable_follower_name() {
  ;
  return _impl_.follower_name_.Mutable( GetArenaForAllocation());
}
inline std::string* timelineRequest::release_follower_name() {
  // @@protoc_insertion_point(field_release:csce438.timelineRequest.follower_name)
  return _impl_.follower_name_.Release();
}
inline void timelineRequest::set_allocated_follower_name(std::string* value) {
  _impl_.follower_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.follower_name_.IsDefault()) {
          _impl_.follower_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:csce438.timelineRequest.follower_name)
}

// -------------------------------------------------------------------

// MasterInfo

// int32 serverID = 1;
inline void MasterInfo::clear_serverid() {
  _impl_.serverid_ = 0;
}
inline ::int32_t MasterInfo::serverid() const {
  // @@protoc_insertion_point(field_get:csce438.MasterInfo.serverID)
  return _internal_serverid();
}
inline void MasterInfo::set_serverid(::int32_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:csce438.MasterInfo.serverID)
}
inline ::int32_t MasterInfo::_internal_serverid() const {
  return _impl_.serverid_;
}
inline void MasterInfo::_internal_set_serverid(::int32_t value) {
  ;
  _impl_.serverid_ = value;
}

// int32 clusterID = 2;
inline void MasterInfo::clear_clusterid() {
  _impl_.clusterid_ = 0;
}
inline ::int32_t MasterInfo::clusterid() const {
  // @@protoc_insertion_point(field_get:csce438.MasterInfo.clusterID)
  return _internal_clusterid();
}
inline void MasterInfo::set_clusterid(::int32_t value) {
  _internal_set_clusterid(value);
  // @@protoc_insertion_point(field_set:csce438.MasterInfo.clusterID)
}
inline ::int32_t MasterInfo::_internal_clusterid() const {
  return _impl_.clusterid_;
}
inline void MasterInfo::_internal_set_clusterid(::int32_t value) {
  ;
  _impl_.clusterid_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace csce438


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_synchronizer_2eproto_2epb_2eh
