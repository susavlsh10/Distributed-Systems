// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: synchronizer.proto

#include "synchronizer.pb.h"
#include "synchronizer.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace csce438 {

static const char* SynchService_method_names[] = {
  "/csce438.SynchService/SyncUsers",
  "/csce438.SynchService/SyncFollowers",
  "/csce438.SynchService/SyncTimeline",
};

std::unique_ptr< SynchService::Stub> SynchService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SynchService::Stub> stub(new SynchService::Stub(channel, options));
  return stub;
}

SynchService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SyncUsers_(SynchService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SyncFollowers_(SynchService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SyncTimeline_(SynchService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::csce438::SyncReply>* SynchService::Stub::SyncUsersRaw(::grpc::ClientContext* context, const ::csce438::SyncRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::csce438::SyncReply>::Create(channel_.get(), rpcmethod_SyncUsers_, context, request);
}

void SynchService::Stub::async::SyncUsers(::grpc::ClientContext* context, const ::csce438::SyncRequest* request, ::grpc::ClientReadReactor< ::csce438::SyncReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::csce438::SyncReply>::Create(stub_->channel_.get(), stub_->rpcmethod_SyncUsers_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::csce438::SyncReply>* SynchService::Stub::AsyncSyncUsersRaw(::grpc::ClientContext* context, const ::csce438::SyncRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::csce438::SyncReply>::Create(channel_.get(), cq, rpcmethod_SyncUsers_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::csce438::SyncReply>* SynchService::Stub::PrepareAsyncSyncUsersRaw(::grpc::ClientContext* context, const ::csce438::SyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::csce438::SyncReply>::Create(channel_.get(), cq, rpcmethod_SyncUsers_, context, request, false, nullptr);
}

::grpc::ClientReader< ::csce438::SyncReply>* SynchService::Stub::SyncFollowersRaw(::grpc::ClientContext* context, const ::csce438::SyncRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::csce438::SyncReply>::Create(channel_.get(), rpcmethod_SyncFollowers_, context, request);
}

void SynchService::Stub::async::SyncFollowers(::grpc::ClientContext* context, const ::csce438::SyncRequest* request, ::grpc::ClientReadReactor< ::csce438::SyncReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::csce438::SyncReply>::Create(stub_->channel_.get(), stub_->rpcmethod_SyncFollowers_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::csce438::SyncReply>* SynchService::Stub::AsyncSyncFollowersRaw(::grpc::ClientContext* context, const ::csce438::SyncRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::csce438::SyncReply>::Create(channel_.get(), cq, rpcmethod_SyncFollowers_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::csce438::SyncReply>* SynchService::Stub::PrepareAsyncSyncFollowersRaw(::grpc::ClientContext* context, const ::csce438::SyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::csce438::SyncReply>::Create(channel_.get(), cq, rpcmethod_SyncFollowers_, context, request, false, nullptr);
}

::grpc::ClientReader< ::csce438::SyncReply>* SynchService::Stub::SyncTimelineRaw(::grpc::ClientContext* context, const ::csce438::SyncRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::csce438::SyncReply>::Create(channel_.get(), rpcmethod_SyncTimeline_, context, request);
}

void SynchService::Stub::async::SyncTimeline(::grpc::ClientContext* context, const ::csce438::SyncRequest* request, ::grpc::ClientReadReactor< ::csce438::SyncReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::csce438::SyncReply>::Create(stub_->channel_.get(), stub_->rpcmethod_SyncTimeline_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::csce438::SyncReply>* SynchService::Stub::AsyncSyncTimelineRaw(::grpc::ClientContext* context, const ::csce438::SyncRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::csce438::SyncReply>::Create(channel_.get(), cq, rpcmethod_SyncTimeline_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::csce438::SyncReply>* SynchService::Stub::PrepareAsyncSyncTimelineRaw(::grpc::ClientContext* context, const ::csce438::SyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::csce438::SyncReply>::Create(channel_.get(), cq, rpcmethod_SyncTimeline_, context, request, false, nullptr);
}

SynchService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SynchService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SynchService::Service, ::csce438::SyncRequest, ::csce438::SyncReply>(
          [](SynchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::SyncRequest* req,
             ::grpc::ServerWriter<::csce438::SyncReply>* writer) {
               return service->SyncUsers(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SynchService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SynchService::Service, ::csce438::SyncRequest, ::csce438::SyncReply>(
          [](SynchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::SyncRequest* req,
             ::grpc::ServerWriter<::csce438::SyncReply>* writer) {
               return service->SyncFollowers(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SynchService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SynchService::Service, ::csce438::SyncRequest, ::csce438::SyncReply>(
          [](SynchService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::csce438::SyncRequest* req,
             ::grpc::ServerWriter<::csce438::SyncReply>* writer) {
               return service->SyncTimeline(ctx, req, writer);
             }, this)));
}

SynchService::Service::~Service() {
}

::grpc::Status SynchService::Service::SyncUsers(::grpc::ServerContext* context, const ::csce438::SyncRequest* request, ::grpc::ServerWriter< ::csce438::SyncReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SynchService::Service::SyncFollowers(::grpc::ServerContext* context, const ::csce438::SyncRequest* request, ::grpc::ServerWriter< ::csce438::SyncReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SynchService::Service::SyncTimeline(::grpc::ServerContext* context, const ::csce438::SyncRequest* request, ::grpc::ServerWriter< ::csce438::SyncReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace csce438

